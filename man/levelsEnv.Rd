% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_levels.R
\docType{data}
\name{levelsEnv}
\alias{levelsEnv}
\title{Levels Environment and home to all scale_labels vectors:}
\format{
An object of class \code{environment} of length 3.
}
\usage{
levelsEnv
}
\value{
levelsEnv
}
\description{
Levels Environment and home to all scale_labels vectors:
}
\examples{
# TODO: Figure out how to store all scale_labels vectors and how to then
# retrieve them when building charts
# One potential solution- use environments and retrieve the vectors when using the package
# inside scripts and Rmd docs, and eventually when moving to automating reporting in R.
#
# Try with three levels that are normally used like this in vectors to pass to the
# scale_labels argument across blackstone package:
# # levels min_ext:
# levels_min_ext <- c("Minimal", "Slight", "Moderate", "Good", "Extensive")
#
# # levels never to always:
# levels_never_always <- c("Never", "Rarely", "Sometimes", "Frequently", "Always")
#
# # levels useful:
# levels_useful <- c("Not at all useful", "Slightly useful", "Somewhat useful",
# "Very useful", "Extremely useful")
# # How to make them into a Named list of stacked levels:
# stacked_levels <- list(levels_min_ext,levels_never_always,levels_useful)
# # Names for named list of "stacked levels" using the suffixes for stacked bar charts:
# names(stacked_levels) <- c("levels_min_ext","levels_never_always","levels_useful")
#
# TODO: Test in the file "R_Reporting_template.Rmd":
#
# # EXAMPLE:
# url <- "http://mytext.com"
# file <- "This is the content I downloaded"
# cacheEnv <- new.env()
# assign(url, file, envir=cacheEnv)
# get(url, envir=cacheEnv)
#
# Creating and fill new environment with vectors and parameters for use across the whole package:
# Name new environment- "levelsEnv":
# levelsEnv <- new.env()
# Assign each vector to the new environment using this code:
# assign(<name of var/vector>, <content of var/vector>, envir=cacheEnv)
# both the name and content can be already assigned alias/vars that you pass to the assign()
# like in the example above:
# # levels min_ext:
# levels_min_ext <- c("Minimal", "Slight", "Moderate", "Good", "Extensive")
# assign("levels_min_ext", c("Minimal", "Slight", "Moderate", "Good", "Extensive"),
# envir = levelsEnv)
# how to retrieve and name back to the original vector name- Two Ways-
# 1. using get() or 2. using the familiar list extraction: env[[<name of var/vector>]]:
# levels_min_ext <- get("levels_min_ext", envir = levelsEnv)
# levels_min_ext <- levelsEnv[["levels_min_ext"]]
#
# Assign two other vectors to the new environment- "levelsEnv":
# # levels never to always:
# levels_never_always <- c("Never", "Rarely", "Sometimes", "Frequently", "Always")
# assign("levels_never_always", c("Never", "Rarely", "Sometimes", "Frequently", "Always"),
# envir = levelsEnv)
# levels_never_always <- get("levels_never_always", envir = levelsEnv)
# # levels useful:
# levels_useful <- c("Not at all useful", "Slightly useful", "Somewhat useful",
# "Very useful", "Extremely useful")
# assign("levels_useful", c("Not at all useful", "Slightly useful", "Somewhat useful",
# "Very useful", "Extremely useful"), envir = levelsEnv)
# levels_useful <- get("levels_useful", envir = levelsEnv)
# Continue adding variables/vectors/parameters as needed for package/reporting needs...
}
\keyword{internal}
